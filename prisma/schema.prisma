// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favouriteIds   String[]  @db.ObjectId
  sessions       Session[]
  accounts       Account[]
  info           Info?
}

model Info {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @unique @db.ObjectId
  firstName    String
  middleName   String?
  lastName     String
  designation  String
  address      String
  email        String
  phone        String
  summary      String
  achievements Achievement[]
  experiences  Experience[]
  educations   Education[]
  projects     Project[]
  skills       Skill[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  thumbnailUrl String
  code         String
}

model Achievement {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  infoId      String
  info        Info   @relation(fields: [infoId], references: [id])
}

model Experience {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  organisation String
  location     String
  startDate    String
  endDate      String
  description  String
  infoId       String @unique
  info         Info   @relation(fields: [infoId], references: [id])
}

model Education {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  school         String
  degree         String
  city           String
  startDate      String
  graduationDate String
  description    String
  infoId         String
  info           Info   @relation(fields: [infoId], references: [id])
}

model Project {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  link        String
  description String
  infoId      String
  info        Info   @relation(fields: [infoId], references: [id])
}

model Skill {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  infoId String
  info   Info   @relation(fields: [infoId], references: [id])
}
